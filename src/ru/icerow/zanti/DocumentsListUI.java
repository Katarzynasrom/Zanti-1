package ru.icerow.zanti;

import java.util.ArrayList;
import java.util.List;
import ru.icerow.zanti.db.ZantiDao;

/**
 *
 * @author Artyom
 */
public final class DocumentsListUI extends javax.swing.JFrame {

    private static boolean showId = false;
    private static boolean showAuthor = true;
    protected static ZantiDao dao;
    private static List<Document> documentsList;
    
    /**
     * Creates new form DocumentsListUI
     */
    public DocumentsListUI() {
        initComponents();
        
        // Connect to DB
        dao = new ZantiDao();
        dao.connect();

        // Get documents list from DB
        getList();

        // Fill in documents list
        refreshList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListDocuments = new javax.swing.JList();
        jButtonExit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        jToggleId = new javax.swing.JToggleButton();
        jToggleAuthor = new javax.swing.JToggleButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Система организации и порядка выполнения НИР");

        jListDocuments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDocuments.setToolTipText("");
        jListDocuments.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jListDocuments.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDocumentsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDocuments);

        jButtonExit.setText("Выход");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setEditable(false);
        jTextAreaDescription.setRows(5);
        jTextAreaDescription.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextAreaDescription.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jTextAreaDescription);

        jLabel1.setText("Список научно-исследовательских работ:");

        jLabel2.setText("Описание выбранной работы:");

        jToolBar2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel3.setText("Отображать в списке:");
        jToolBar2.add(jLabel3);

        jToggleId.setText("Порядковый номер ");
        jToggleId.setFocusable(false);
        jToggleId.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleId.setMargin(new java.awt.Insets(2, 20, 2, 20));
        jToggleId.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleIdActionPerformed(evt);
            }
        });
        jToolBar2.add(jToggleId);

        jToggleAuthor.setText("Автор");
        jToggleAuthor.setFocusable(false);
        jToggleAuthor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleAuthor.setMargin(new java.awt.Insets(2, 20, 2, 20));
        jToggleAuthor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleAuthorActionPerformed(evt);
            }
        });
        jToolBar2.add(jToggleAuthor);

        jButtonAdd.setText("Добавить НИР");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Изменить НИР");
        jButtonEdit.setEnabled(false);
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEdit)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonEdit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jToggleIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleIdActionPerformed
        showId = jToggleId.isSelected();
        refreshList();
    }//GEN-LAST:event_jToggleIdActionPerformed

    private void jToggleAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleAuthorActionPerformed
        showAuthor = jToggleAuthor.isSelected();
        refreshList();
    }//GEN-LAST:event_jToggleAuthorActionPerformed

    private void jListDocumentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDocumentsValueChanged
        int index = jListDocuments.getSelectedIndex();
        if (index != -1) {
            jTextAreaDescription.setText(documentsList.get(index).getDescription());
            jButtonEdit.setEnabled(true);
        } else {
            jTextAreaDescription.setText("");
            jButtonEdit.setEnabled(false);
        }
    }//GEN-LAST:event_jListDocumentsValueChanged

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        DocumentDetailsUI detailsForm = new DocumentDetailsUI();
        detailsForm.parent = this;
        detailsForm.setModeAdd();
        detailsForm.setVisible(true);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        DocumentDetailsUI detailsForm = new DocumentDetailsUI();
        detailsForm.parent = this;
        detailsForm.setModeEdit(documentsList.get(jListDocuments.getSelectedIndex()).getId());
        detailsForm.setVisible(true);
    }//GEN-LAST:event_jButtonEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocumentsListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocumentsListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocumentsListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocumentsListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DocumentsListUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListDocuments;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JToggleButton jToggleAuthor;
    private javax.swing.JToggleButton jToggleId;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables

    private void toggleStates() {
        jToggleId.setSelected(showId);        
        jToggleAuthor.setSelected(showAuthor);        
    }

    protected void refreshList() {
        // Remember selection of list
        int selection = jListDocuments.getSelectedIndex();
        
        // Toogle button states
        this.toggleStates();

        // Show list of documents
        List<String> listItems = new ArrayList<>();
        String listItem;
        for (Document d : documentsList) {
            listItem = "";
            if (showId) {
                listItem += d.getId() + " - ";
            }
            listItem += d.getName();
            if (showAuthor) {
                listItem += " - " + d.getAuthor();
            }
            listItems.add(listItem);
        }
        jListDocuments.setListData(listItems.toArray());
        jListDocuments.setSelectedIndex(selection);
    }

    protected void getList() {
        documentsList = dao.getListEntries();
    }
}
